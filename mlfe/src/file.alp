module file

type result 'o 'e = Ok 'o | Error 'e
export_type result

export delete/1, read_file/1, write_file/2

val delete: [string] -> result () atom
let delete path =
  beam :file :delete [path] with
    (:error, e), is_atom e -> Error e
  | :ok                     -> Ok ()

val read_file: [string] -> result string atom
let read_file path =
  beam :file :read_file [path] with
    (:error, e), is_atom e    -> Error e
  | (:ok, bin), is_string bin -> Ok bin

val write_file: [string, list string] -> result () atom
let write_file path content =
  beam :file :write_file [path, content] with
    (:error, e), is_atom e -> Error e
  | :ok                    -> Ok ()
